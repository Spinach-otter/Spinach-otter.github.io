<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA安装依赖后依然报错</title>
      <link href="/2023/07/12/idea-an-zhuang-yi-lai-hou-yi-ran-bao-cuo/"/>
      <url>/2023/07/12/idea-an-zhuang-yi-lai-hou-yi-ran-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA安装依赖后依然报错"><a href="#IDEA安装依赖后依然报错" class="headerlink" title="IDEA安装依赖后依然报错"></a>IDEA安装依赖后依然报错</h1><p>确定安装成功依赖之后，若某些语句依然标红报错，很有可能是IDEA自己的问题，只需要清空IDEA的缓存然后重启即可。重启大法才是最牛的。</p><p>具体操作：<code>file-&gt;invalidate caches-&gt;确定清空缓存重启</code></p><p><img src="https://s3.bmp.ovh/imgs/2023/07/12/e5e83fd0a4c1272d.png"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA之JAVA配置报错</title>
      <link href="/2023/07/12/idea-zhi-java-pei-zhi-bao-cuo/"/>
      <url>/2023/07/12/idea-zhi-java-pei-zhi-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA之JAVA配置报错"><a href="#IDEA之JAVA配置报错" class="headerlink" title="IDEA之JAVA配置报错"></a>IDEA之JAVA配置报错</h1><p>使用JAVA创建工程时，时常会出现以下问题。数字不一定是17，可能是5，6，7，8等等等等</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/12/ef4d8e22a2fd77c4.png"></p><p>问题的根源其实是，工程中选定的JAVA编译版本不一致，只需要以下几步，把所有版本设置为自己有的JDK即可</p><ol><li><p>快捷键<code>command+,</code>，preference-&gt;build-&gt;compiler-&gt;java，出现数字版本的地方全部改成一样</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/12/0c353918a46556bb.png"></p></li><li><p>快捷键<code>command+;</code>，project structure-&gt;project，SDK改成一样的版本</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/12/60b8f65d60b83ae6.png"></p></li><li><p>上面的侧栏<code>Modules</code>，一样的source和dependence的都要改成一样的版本</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/12/e86cba63859c377d.png"></p><p><img src="https://s3.bmp.ovh/imgs/2023/07/12/25a3fa3651b132c9.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> BUG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo中插入PDF</title>
      <link href="/2023/07/09/hexo-zhong-cha-ru-pdf/"/>
      <url>/2023/07/09/hexo-zhong-cha-ru-pdf/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo中插入PDF"><a href="#Hexo中插入PDF" class="headerlink" title="Hexo中插入PDF"></a>Hexo中插入PDF</h1><h3 id="安装hexo-pdf"><a href="#安装hexo-pdf" class="headerlink" title="安装hexo-pdf"></a>安装hexo-pdf</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install --save hexo-pdf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h3><p><code>post_asset_folder: true</code></p><p>说明：设置为true之后，在<code>hexo new 文件名</code>时，会在_post文件下同时生成 “文件名.md” 和 “文件名”的文件夹</p><h3 id="生成文件test"><a href="#生成文件test" class="headerlink" title="生成文件test"></a>生成文件test</h3><p>在test文件夹下放需要展示的pdf文件，例如test&#x2F;tmp&#x2F;1.pdf</p><p>在test.md相应的位置放入下列代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% pdf tmp/1.pdf %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用外部PDF一样</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% pdf https://XXX.pdf %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模校赛复盘</title>
      <link href="/2023/07/09/shu-xue-jian-mo-xiao-sai-fu-pan/"/>
      <url>/2023/07/09/shu-xue-jian-mo-xiao-sai-fu-pan/</url>
      
        <content type="html"><![CDATA[<h1 id="数学建模校赛复盘"><a href="#数学建模校赛复盘" class="headerlink" title="数学建模校赛复盘"></a>数学建模校赛复盘</h1><h3 id="选题后自信满满"><a href="#选题后自信满满" class="headerlink" title="选题后自信满满"></a>选题后自信满满</h3><p>第一天拿到AB两题，A题是物理题直接跳过，B题是血糖预测题，背景熟悉且一眼回归问题，二话不说直接上手了。题目长这样：</p><div class="row">    <embed src="2023年度东华大学数学建模竞赛B题.pdf" width="100%" height="550" type="application/pdf"></div><p>思路直出：数据清洗——统计数据——划分数据——丢特征&amp;&amp;PCA筛选几个主成分——训练模型——选择模型进行预测。</p><h3 id="走上弯路"><a href="#走上弯路" class="headerlink" title="走上弯路"></a>走上弯路</h3><p>当时没有仔细看问题2和3，是需要在选择某些确定的特征后再进行模型训练和预测。而不能用压缩了的主成分，但是我们没有放弃PCA筛选主成分这一步，我们利用PCA得出的特征对主成分的贡献系数筛选了一些特征，相当于用PCA的二手信息再筛选，<strong>所以为什么不直接用一手信息，我请问呢？</strong>总而言之就是用了多手信息筛选特征后训练模型发现效果很差。</p><h3 id="推倒重来"><a href="#推倒重来" class="headerlink" title="推倒重来"></a>推倒重来</h3><p>经过和队友的讨论，选择数据用一手数据，用Pearson相关系数找相关性大的特征即可，根据经验用相关系数先筛选一些特征进行训练，如不理想则重新选择特征数量。</p><p>这里有个争吵点：若不是线性模型，用线性相关选出的特征不一定对非线性模型有跟好的效果，所以在不确定一定使用线性模型时，用线性相关筛选特征是否不合适？这个问题提出后，所有进度直接停摆，通过询问建议等等，得出结论为：<strong>在机器学习时应当从最简单的想法出发，就是直接用线性相关筛选即可，即使不合适也是实验效果差的后话了。</strong></p><p>于是最终使用Pearson选特征，然后训练模型。</p><h3 id="模型结果离谱"><a href="#模型结果离谱" class="headerlink" title="模型结果离谱"></a>模型结果离谱</h3><p>各种回归模型预测结果都十分离谱，$R^2$只有0.1几，也就是拟合程度只有10%，很不合理。</p><p>所以回去找问题，一路逆推，模型挑选和代码没问题。</p><p>那么可能是特征选择不好，我们直接从全部特征仍进行，到逐渐减少特征，特征不论怎么选结果都很差。</p><p>最后询问建议，结果是赛放数据给的不好，以及测试数据很小，很可能存在极端的状况，所以初步确定锅在主办方。我队摆停，因为不知道之后应当去摆烂交垃圾模型，还是继续优化看能否提升一些性能，已经过去比赛时间的一半了论文没动过，策略有点问题的。</p><h3 id="峰回路转"><a href="#峰回路转" class="headerlink" title="峰回路转"></a>峰回路转</h3><p>休息一个晚上，早上队长扔了很多天池notebook，本意是想让我们画一些正态分布、训练数据与测试数据的趋势图进行特征筛选。然后发现又个小方法，就是模型融合。反正想不到方法了，试试就试试，结果训练结果超级好$R^2$高达95%，泛化能力也不错。所以一切豁然开朗，直接开始写论文，进度起飞，直接搞完。</p><h3 id="收获总结"><a href="#收获总结" class="headerlink" title="收获总结"></a>收获总结</h3><ul><li>了解数学建模或者机器学习整体流程都是大道至简的，先用简单方法实践，效果不好再回头</li><li>数据清洗，清洗时包括数据类型、数据空值、异常值、max-min、数据正态观察，还有相应的可视化</li><li>数据划分，对训练集验证集测试集以及K折交叉验证更熟悉</li><li>特征选择，数据统计后直接丢弃、相关系数选最重要的、训练与测试数据的趋势丢掉一些、能使用PCA可尝试</li><li>模型训练，这个反而是最简单的，只要调用库即可，但是对于调参和正则化依然不太知道操作；集成学习第一次尝试</li></ul><h3 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h3><div class="row">    <embed src="DHU23128/糖尿病风险预测.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github发布个人博客</title>
      <link href="/2023/07/06/hexo-github-fa-bu-ge-ren-bo-ke/"/>
      <url>/2023/07/06/hexo-github-fa-bu-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo框架-GitHub实现静态博客"><a href="#hexo框架-GitHub实现静态博客" class="headerlink" title="hexo框架+GitHub实现静态博客"></a>hexo框架+GitHub实现静态博客</h1><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><h3 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><p>因为hexo是基于node.js的框架，所以先下载安装好node.js环境。</p><p><a href="https://nodejs.org/zh-cn/">node.js官网下载长期版本</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">使用下列shell命令检测node.js是否安装成功node -vterminal终端返回： v18.13.0 类似的版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="hexo安装使用"><a href="#hexo安装使用" class="headerlink" title="hexo安装使用"></a>hexo安装使用</h3><p>hexo框架中需要下载一些依赖包，但是npm镜像国外的所以下载超级慢。所以先把npm的镜像设置为淘宝的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">注意：如果使用npm时，一直有error说明权限不够。解决办法为在所有的npm命令前面加上sudo，变成超级管理清空代理npm config set proxy null如果报错就换成超级管理身份sudo npm config set proxy null清空缓存npm cache clean --force重新设置镜像npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 用cd命令进入你要安装hexo的目录路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">例如：cd &#x2F;User&#x2F;Spinach&#x2F;Desktop&#x2F;website&#x2F;bolg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装hexo指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo npm install hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化hexo博客框架</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始运行hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">使用指令先安装依赖npm install在本地运行hexohexo start返回：hexo is running at http:&#x2F;&#x2F;localhost:4000打开任意浏览器搜索http:&#x2F;&#x2F;localhost:4000 即可看到hexo在本地发布的博客框架内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一篇新的博客</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n &quot;我的第一篇博客&quot;返回：Created: &#x2F;User&#x2F;Spinach&#x2F;Desktop&#x2F;website&#x2F;blog&#x2F;source&#x2F;_post&#x2F;我的第一篇博客.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用markdown语法把文件 “我的第一篇博客.md” 编辑好后，退回到安装hexo的目录重新发布</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">退回安装了hexo的目录cd &#x2F;User&#x2F;Spinach&#x2F;Desktop&#x2F;website&#x2F;blog清理一下hexo clean生成一下hexo g重新运行一下hexo s浏览器打开4000端口即可看到 “我的第一篇博客.md” 的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以上只是在本地发布了博客内容，没有发布在互联网上，可以借助GitHub pages为我们提供一个互联网访问入口</strong></p><h2 id="Git安装及链接"><a href="#Git安装及链接" class="headerlink" title="Git安装及链接"></a>Git安装及链接</h2><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>Mac自带git工具，不需要额外下载</p><p><a href="https://git-scm.com/download/windows">Win下载git地址</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">使用指令查看git是否下载成功git --version返回： git version 2.37.1(Apple Git-137.1) 类似的版本信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>需要使用SSH来链接本地与GitHub</p><p>所以先得到本地的SSH公钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C &quot;2947387166@qq.com&quot; 上面邮箱换成自己注册Github的邮箱一路回车即可，如果提示是否重新生成，直接填y进入ssh目录下cd .ssh查看公钥cat id_rsa.pub把显示出的公钥信息复制好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去Github填写本地的公钥，配置SSH</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">进入github.com登入点击头像，选择settings进入点击SSH and GPG keys，然后点击New SSH KeyTitle框填自己GitHub上的用户名，key type默认，key将刚刚复制的ssh公钥黏贴进去，然后Add SSH Key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将hexo发布在GitHub仓库里"><a href="#将hexo发布在GitHub仓库里" class="headerlink" title="将hexo发布在GitHub仓库里"></a>将hexo发布在GitHub仓库里</h3><ol><li><p>在GitHub页面new一个repository，Repository name填写<code>username.github.io</code>；username是自己的GitHub用户名。然后直接Create Repository</p></li><li><p>将hexo界面发布到GitHub上。</p><p>打开blog文件夹下的_config.yml，修改以下三个地方：</p><p>一：title改成自己想要的文字，language改成zh-CN，author改成自己想要的发布者的昵称</p><p><img src="https://s3.bmp.ovh/imgs/2023/07/06/3581d0eb98f3a7c0.png"></p><p>二：16行左右的url改成<code>https://username.github.io</code>  ；username是GitHub的用户名</p><p>三：文件最后改成下面这样，repo用的格式<code>git@github.com:username/username.github.io.git</code></p><p><img src="https://s3.bmp.ovh/imgs/2023/07/06/bc1fa3c7825ce6ae.png"></p><p>修改完保存后退出</p></li><li><p>安装hexo中的git插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用指令配置git的邮箱和用户名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global user.email &quot;2947387166@qq.com&quot;git config --global user.name &quot;Spinach&quot;邮箱和用户名都是自己GitHub上的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>将本地的hexo发布到GitHub上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>接下来就可以通过GitHub的这个仓库对应的浏览器链接访问自己的博客啦！</strong></p><h2 id="美化DIY"><a href="#美化DIY" class="headerlink" title="美化DIY"></a>美化DIY</h2><p>主题替换，在<a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 找到自己喜欢的博客主题进行安装。我自己用的是<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>。</p><p>把下载好的主题文件包，例如“matery” </p><p>放到安装hexo的目录下，比如“&#x2F;User&#x2F;Spinach&#x2F;Desktop&#x2F;website&#x2F;bolg”</p><p>修改&#x2F;User&#x2F;Spinach&#x2F;Desktop&#x2F;website&#x2F;bolg&#x2F;_config.yml文件中<code>theme: 下载的主题文件包名字</code></p><p><img src="https://s3.bmp.ovh/imgs/2023/07/06/92f20e86cd931369.png"></p><p>保存修改退出后，重新发布hexo即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">运行hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
